[{'choices': [[u'wrong',
               u'Linear functions',
               u'A class is very suitable for mathematical functions with parameters (in addition to one or more independent variables), because one then avoids to have the parameters as global variables.'],
              [u'wrong',
               u'Polynomials',
               u'A class is very suitable for mathematical functions with parameters (in addition to one or more independent variables), because one then avoids to have the parameters as global variables.'],
              [u'wrong',
               u'Trigonometric functions',
               u'A class is very suitable for mathematical functions with parameters (in addition to one or more independent variables), because one then avoids to have the parameters as global variables.'],
              [u'right',
               u'Functions with parameters in addition to independent variable(s)',
               u'A class is very suitable for mathematical functions with parameters (in addition to one or more independent variables), because one then avoids to have the parameters as global variables.'],
              [u'wrong',
               u'Functions that need <code>if</code> tests',
               u'A class is very suitable for mathematical functions with parameters (in addition to one or more independent variables), because one then avoids to have the parameters as global variables.'],
              [u'wrong',
               u'Mathematically beautiful functions with a touch of class',
               u'A class is very suitable for mathematical functions with parameters (in addition to one or more independent variables), because one then avoids to have the parameters as global variables.']],
  'no': 1,
  'question': u'What kind of mathematical functions are best implemented as a class?'},
 {'choices': [[u'wrong',
               u'<code>value</code>',
               u'<code>value</code> has nothing to do with a constructor.'],
              [u'right',
               u'<code>__init__</code>',
               u'The constructor must always be called <code>__init__</code>.'],
              [u'wrong',
               u'<code>__call__</code>',
               u'<code>__call__</code> is not the constructor, it is used to make instances callable as ordinary Python functions.']],
  'no': 2,
  'question': u'What is the name of the constructor in a Python class?'},
 {'choices': [[u'wrong',
               u'Any class method must have <code>self</code> as first argument.',
               u'This statement is correct, but the name <code>self</code> is just a convention - any name will do.'],
              [u'wrong',
               u'<code>self</code> is dropped as argument in calls to class methods.',
               u'This statements is correct, Python will feed in the instance object automatically as <code>self</code> in any method.'],
              [u'right',
               u'<code>self</code> is a reserved word in Python.',
               u'Wrong because <code>self</code> is just a naming convention of an instances of the current class - other languages use <code>this</code> instead (as a reserved word). Any name instead of <code>self</code> can be used, but it is a convention to use <code>self</code>.'],
              [u'wrong',
               u'<code>self</code> is used to give various parts of a class access to common attributes and methods',
               u'This statement is correct.']],
  'no': 3,
  'question': u'Which statement is wrong?'},
 {'choices': [[u'wrong',
               u'An object of a class is called an instance',
               u'This statement is correct.'],
              [u'wrong',
               u'A function in a class is called a method',
               u'This statement is correct.'],
              [u'wrong',
               u'A variable in a class is called an attribute',
               u'This statement is correct.'],
              [u'wrong',
               u'The <code>__init__</code> method is called constructor',
               u'This statement is correct.'],
              [u'right',
               u'Attributes must be defined in the constructor',
               u'False, attributes can be defined in any method and even outside the class in the calling program.'],
              [u'wrong',
               u'<code>self</code> is the first argument in methods, but never used in method calls',
               u'This statement is correct.'],
              [u'wrong',
               u'<code>self</code> is a reference to the instance of the class that was used in the call to a method',
               u'This statement is correct.']],
  'no': 4,
  'question': u'Which of the following statements is false?'},
 {'choices': [[u'wrong',
               u'A document that is read into a Python string with <code>f.read()</code>',
               u'No, a doc string is used to document code.'],
              [u'wrong',
               u'A string enclosed in triple double quotes',
               u'Doc strings are by convention enclosed in triple double quotes, but not all strings enclosed in this type of quotes are doc strings! And doc strings can be enclosed in any type of quotes - triple double quotes is just a common convention.'],
              [u'right',
               u'The first string after a class or function definition, or the first string in a module file. The purpose of the string is to document the function/class/module.',
               u'Correct.'],
              [u'wrong',
               u'A statement made by a person with a doctorate degree',
               u'This is nonsense.']],
  'no': 5,
  'question': u'What is a doc string?'},
 {'choices': [[u'wrong',
               u'Double quotes and brief listing of keywords regarding the function/class.',
               u'The convention for writing doc strings in Python is to use triple double quotes and full phrases.'],
              [u'wrong',
               u'Simple quotes and complete phrases (capital letter and full stop)',
               u'The convention for writing doc strings in Python is to use triple double quotes and full phrases.'],
              [u'wrong',
               u'Triple double quotes around an interactive example showing how to use the class/function',
               u'The convention for writing doc strings in Python is to use triple double quotes and full phrases. Interactive examples are fine, but not a convention, just a suggested option when it makes sense.'],
              [u'right',
               u'Triple double quotes and complete phrases (capital letter and full stop)',
               u'Correct.']],
  'no': 6,
  'question': u'What is the convention for writing a doc string in Python?'},
 {'choices': [[u'wrong',
               u'class methods',
               u'Class methods having names starting and ending with a double underscore are called special methods.'],
              [u'wrong',
               u'constructor methods',
               u'Class methods having names starting and ending with a double underscore are called special methods.'],
              [u'wrong',
               u'static methods',
               u'Class methods having names starting and ending with a double underscore are called special methods.'],
              [u'right',
               u'special methods',
               u'Class methods having names starting and ending with a double underscore are called special methods.']],
  'no': 7,
  'question': u'Class methods having names starting and ending with a double underscore are called:'},
 {'choices': [[u'wrong',
               u"<code>Y.find('v0')</code>",
               u'To check if a class contains the attribute <code>v0</code>, we can use the Python function <code>hasattr</code>.'],
              [u'wrong',
               u"<code>search('Y', 'v0')</code>",
               u'To check if a class contains the attribute <code>v0</code>, we can use the Python function <code>hasattr</code>.'],
              [u'right',
               u"<code>hasattr(self, 'v0')</code>",
               u'To check if a class contains the attribute <code>v0</code>, we can use the Python function <code>hasattr</code>.'],
              [u'wrong',
               u'<code>isinstance(v0, Y)</code>',
               u'This checks if <code>v0</code> is of type <code>Y</code>, <code>hasattr</code> is the right function to use here.']],
  'no': 8,
  'question': u'How can we check if a class <code>Y</code> holds the variable <code>v0</code>?'},
 {'choices': [[u'right',
               u'<code>__str__</code> usually returns a pretty print of the instance while <code>__repr__</code> usually returns a string that works with <code>eval</code> to recreate the instance',
               u'<code>__str__</code> usually returns a pretty print of the instance while <code>__repr__</code> usually returns a string that works with <code>eval</code> to recreate the instance.'],
              [u'wrong',
               u'No difference, <code>__repr__</code> is a synonym for <code>__str__</code>',
               u'<code>__str__</code> usually returns a pretty print of the instance while <code>__repr__</code> usually returns a string that works with <code>eval</code> to recreate the instance.'],
              [u'wrong',
               u'<code>__str__</code> converts the instance to a string, while <code>__repr__</code> repairs a broken instance',
               u'<code>__str__</code> usually returns a pretty print of the instance while <code>__repr__</code> usually returns a string that works with <code>eval</code> to recreate the instance.'],
              [u'wrong',
               u'<code>__str__</code> is a legal special method name while <code>__repr__</code> is an illegal name',
               u'<code>__str__</code> usually returns a pretty print of the instance while <code>__repr__</code> usually returns a string that works with <code>eval</code> to recreate the instance.']],
  'no': 9,
  'question': u'What is the difference between <code>__str__</code> and <code>__repr__</code>?'},
 {'choices': [[u'wrong',
               u'By using the keyword <code>local</code> as in <code>local mymethod(...)</code>',
               u'There is no <code>local</code> keyword in Python.'],
              [u'right',
               u'By using an underscore as a prefix: <code>_mymethod</code>',
               u'Correct, methods starting with an underscore are local/private/non-public to the class and not meant to be called outside the class.'],
              [u'wrong',
               u'By using the keyword <code>private</code> before the method name',
               u'There is no <code>private</code> keyword in Python.'],
              [u'wrong',
               u'By using the keyword <code>protected</code> before the method name',
               u'There is no keyword <code>protected</code> in Python - a method name starting with an underscore is what corresponds to <code>protected</code> in other languages.'],
              [u'wrong',
               u'By using the keyword <code>nonpublic</code> before the method name',
               u'There is no keyword `nonpublic in Python.']],
  'no': 10,
  'question': u'How can we define a local (or non-public) method that is meant to be called other methods in the class only and not by users of the class?'},
 {'choices': [[u'right',
               u'<code>a</code> and <code>b</code> are two floating point numbers',
               u'A floating-point number may be subject to round-off errors. Two mathematically equal numbers may be different in their inexact representations on the computer, which will make the result of a test <code>if a == b</code> is <code>False</code> when the test would have been <code>True</code> in exact mathematics.'],
              [u'wrong',
               u'<code>a</code> and <code>b</code> are of two different types',
               u"<code>a</code> and <code>b</code> can be of different types if <code>a</code>'s type (class) has a special method <code>__eq__</code> which allows an argument of another type (and this might well be the case - the programmer of <code>a</code>'s type is in charge of what <code>__eq__</code> does)."],
              [u'wrong',
               u'<code>a</code> and <code>b</code> are instances of a user-defined class',
               u'No, this works fine if the class has an <code>__eq__</code> special method. If not, <code>a == b</code> still works, but the outcome might be unintended.']],
  'no': 11,
  'question': u'The boolean expression <code>a == b</code> can lead to unintended results when'},
 {'choices': [[u'wrong',
               u'When noble statements are of a high class',
               u'Python programs are always high class.'],
              [u'right',
               u'When a set of variables and functions naturally belong together and should be viewed as one unit',
               u'This is correct.'],
              [u'wrong',
               u'When you want a simple program to look difficult',
               u'Class-based programs usually looks simpler than function-based programs unless the program is very short.'],
              [u'wrong',
               u'When you want to show others that you are an advanced programmer',
               u'Most programmers master the class concept so it takes more than classes to convince others that you are an advanced programmer.'],
              [u'wrong',
               u'When a program needs global variables',
               u'Classes can sometimes avoid global variables, but the presence of global variables is not always a good indication of the need for classes.'],
              [u'wrong',
               u'When you lack <code>self</code> confidence',
               u'Almost correct - if you lack confidence in the <code>self</code> argument it is smart to program more classes to understand what <code>self</code> is and get improve your self confidence.']],
  'no': 12,
  'question': u'When is it natural to use a class?'}]